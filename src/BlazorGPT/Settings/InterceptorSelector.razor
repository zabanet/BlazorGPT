@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.Options
@using BlazorGPT.Pipeline.Interceptors
@using BlazorGPT.Pipeline
@using Blazored.LocalStorage
@using System.Text.Json



<RadzenCheckBoxList  @ref="list" @bind-Value=@Selected TValue="string" Orientation="Orientation.Vertical"
                    Data="Interceptors.Where(i => !i.Internal).Select(i => i.Name)"
                    Change="OnListChanged"
                    class="@Class">
</RadzenCheckBoxList>


@code {

    [Parameter]
    public string? Class { get; set; }

    [Inject]
    public IServiceProvider ServiceProvider { get; set; } = null!;

    [Inject]
    public IOptions<PipelineOptions> Options { get; set; } = null!;

    [Inject]
    public DialogService DialogService { get; set; } = null!;

    [Inject] 
    private ILocalStorageService? LocalStorage { get; set; }

    [Inject]
    public required InterceptorRepository InterceptorRepository { get; set; }
    
    public IEnumerable<string>? PreSelected => Options.Value.PreSelectedInterceptors;

    private readonly object _model = new();


    IEnumerable<IInterceptor> Interceptors;
    IEnumerable<string> Selected = new List<string>();
    public IEnumerable<IInterceptor>? SelectedInterceptors => Interceptors.Where(i => Selected.Contains(i.Name) || i.Internal);

    protected override void OnInitialized()
    {
        Interceptors = InterceptorRepository.LoadAll().ToList();
        Selected = Interceptors.Where(i => PreSelected != null && PreSelected.Contains(i.Name)).Select(i => i.Name);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Selected = await GetSelectionsFromLocalStorage();
            StateHasChanged();
        }
    }

    private async Task OnListChanged()
    {
        if (SelectedInterceptors?.Count(i => i is IStateWritingInterceptor) > 1)
        {
            await DialogService.Alert("You can only use one hive interceptor at a time.");
            return;
        }

        await SetSelectionsInLocalStorage();
    }

    public RadzenCheckBoxList<string> list { get; set; }


    private async Task<ICollection<string>>  GetSelectionsFromLocalStorage()
    {
        if (LocalStorage != null)
        {
            var data = await LocalStorage.GetItemAsync<ICollection<string>>("bgpt_interceptors");
            if (data != null)
                return data;
        }
        return new List<string>();
    }

    List<string>? BrowserData { get; set; }

    private async Task SetSelectionsInLocalStorage()
    {
        if (LocalStorage != null)
        {
            await LocalStorage.SetItemAsync("bgpt_interceptors", Selected);
        }
    }

    class InterceptorSettings
    {

    }
}