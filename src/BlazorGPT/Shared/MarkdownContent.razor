@using Markdig
@using Markdown.ColorCode
@using ColorCode.Styling
@using System.Text.RegularExpressions
@inherits ComponentBase

@if (Embedding != null)
{
    <EmbeddingsDisplay Value="@Embedding"></EmbeddingsDisplay>
}
@((MarkupString) AsMarkdown)

@code {

    [Parameter]
    public string Content { get; set; }

    public string AsMarkdown;

    string? Embedding { get; set; }

    protected override void OnInitialized()
    {
        markdownPipeline = new MarkdownPipelineBuilder()
            .UsePipeTables()
            .UseAdvancedExtensions()
            .UseColorCode(styleDictionary: StyleDictionary.DefaultDark)
            .UseAutoLinks()
            .UseEmojiAndSmiley()
            .UseMediaLinks()
            .UseCitations()
            .Build();
    }


    protected override void OnParametersSet()
    {
        var embeddingsRemoved = RemoveEmbeddingsElement(Content);
        AsMarkdown = GetMarkdown(embeddingsRemoved);
        StateHasChanged();
    }

    private MarkdownPipeline markdownPipeline;

    private string GetMarkdown(string toHtml)
    {
        try
        {
             toHtml = RemoveEmbeddingsElement(toHtml);

            var html = Markdown.ToHtml(toHtml, markdownPipeline);


            var pattern = "(<div style=\"color:#DADADA;background-color:#1E1E1E;\"><pre>(.*?)</pre></div>)";
            var matches = Regex.Matches(html, pattern, RegexOptions.Singleline | RegexOptions.Multiline | RegexOptions.IgnoreCase);

            for (var i = matches.Count - 1; i >= 0; i--)
            {
                var match = matches[i].ToString();
                var id = "copy" + i;
                var replacement = $"<button data-clipboard-target=\"#{id}\" class=\"float-end copyBtn  mt-0\">Copy</button>" + match;
                html = html.Remove(matches[i].Index, matches[i].Length).Insert(matches[i].Index, replacement);
            }

            return html;
        }
        catch (Exception)
        {
            return "error markdowncontent.razor";
        }
    }

    private string RemoveEmbeddingsElement(string data)
    {
        if (string.IsNullOrEmpty(data))
        {
            return "";
        }
        string pattern = @"\[EMBEDDINGS\](.*?)\[/EMBEDDINGS\]";
        var matches = Regex.Matches(data, pattern, RegexOptions.Multiline | RegexOptions.Singleline | RegexOptions.IgnoreCase);

        if (matches.Count == 0)
        {
            return data;
        }

        data = Regex.Replace(data, pattern, "", RegexOptions.Multiline | RegexOptions.Singleline | RegexOptions.IgnoreCase);
       
        Embedding =  $"{matches[0].Groups[1].Value}";
        return data;
    }

}
