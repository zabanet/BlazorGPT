@using BlazorGPT.Data
@if (Conversation != null)
{
    <div id="message-pane" class="scroll-pane" style="@Style">
        <BranchedFrom Conversation="@Conversation"/>

        @if (Conversation.Messages.Any())
        {
            if (!BotMode)
            {
                <!-- system prompt -->
                <ConversationMessageDisplay
                    @ref="SystemMessageDisplay"
                    InitialSystemPrompt="@InitialSystemPrompt"
                    Message="Conversation.Messages.FirstOrDefault()"
                    MessagesCount="Conversation.Messages.Count()" 
                    ShowEditButton="Conversation.IsStarted()"
                />
                
            }

                
            @foreach (var message in Conversation.Messages.Skip(1))
            {
                <ConversationMessageDisplay 
                    ShowBranches="@ShowBranches"
                    ShowEditButton="!BotMode && Conversation.IsStarted()"
                    ShowRestartButton="!BotMode && RestartConversation.HasDelegate && Conversation.IsStarted() && !message.IsAssistantTurn()"
                    ShowCopyButton="!BotMode && CopyConversation.HasDelegate && Conversation.Id != null"
                    OnRestartClicked="RestartConversation"
                    OnCopyClicked="CopyConversation"
                    Message="message">
                </ConversationMessageDisplay>
                @if (Conversation.Messages.IndexOf(message) == 1 && Conversation.PluginsNames != null)
                {
                    <div class="m-3">Using plugins: @Conversation.PluginsNames</div>
                }
                    @if (Conversation.Messages.IndexOf(message) == 1 && Conversation.SKPlan != null)
                    {

                        <SKPlan PlanAsString="@Conversation.SKPlan"></SKPlan>
                    }
            }
        }

    </div>
}
@code
{
    [Inject]
    public ConversationInterop? Interop { get; set; }

    [Parameter]
    public bool BotMode { get; set; }

    [Parameter]
    public Conversation? Conversation { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public string? InitialSystemPrompt { get; set; }


    [Parameter]
    public EventCallback<ConversationMessage> RestartConversation { get; set; }

    [Parameter]
    public EventCallback<ConversationMessage> CopyConversation { get; set; }

    [Parameter]
    public bool ShowBranches { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Interop != null) await Interop.SetupCopyButtons();
        }
    }

    private ConversationMessageDisplay? SystemMessageDisplay;
}
