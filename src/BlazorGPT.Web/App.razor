@using System.Security.Claims
@inject NavigationManager Navigation

<!DOCTYPE html>
<html lang="en" class="h-100">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <base href="/" />
    <link rel="stylesheet" href="/lib/bootstrap/css/bootstrap.css" type="text/css" />
    <link href="/lib/font-awesome/css/fontawesome.css" rel="stylesheet">

    <link href="/lib/font-awesome/css/solid.css" rel="stylesheet">
    
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />

    <link rel="stylesheet" href="/css/material-dark-base.css">
    <link href="BlazorGPT.Web.styles.css" rel="stylesheet" />

    <link href="_content/BlazorGPT/BlazorGPT.bundle.scp.css" rel="stylesheet" />
    

    <link rel="stylesheet" href="/css/radzen-custom.css">
    <link href="css/site.css" rel="stylesheet" />

    <HeadOutlet @rendermode="@RenderModeForPage" />

</head>

<body class="d-flex flex-column h-100">
@* <CascadingAuthenticationState> *@
    
    <CascadingValue Name="UserId" Value="UserId">

    <Routes @rendermode="@RenderModeForPage"/>
    </CascadingValue>


@* </CascadingAuthenticationState> *@

<div id="blazor-error-ui">
    <environment include="Staging,Production">
        An error has occurred. This application may no longer respond until reloaded.
    </environment>
    <environment include="Development">
        An unhandled exception has occurred. See browser dev tools for details.
    </environment>
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


<script src="_framework/blazor.web.js"></script>
<script src="/lib/bootstrap/js/bootstrap.js"></script>

<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>
<script src="_content/BlazorAnimate/blazorAnimateInterop.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.6/clipboard.min.js"></script>


</body>

</html>

@code
{
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; }

    private IComponentRenderMode? RenderModeForPage => HttpContext.Request.Path.StartsWithSegments("/Account")
        ? null
        : RenderMode.InteractiveServer;


    [Inject]
    public required IHttpContextAccessor HttpContextAccessor { get; set; }


    public string? UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
      
        if (AuthenticationState != null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;
            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                UserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            }
        }

        await base.OnInitializedAsync();
    }
}